# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rEUq0ayLNJUkJGb9DTHR3gaHPrLvdq3-
"""

import pandas as pd
import matplotlib.pyplot as plt
data = pd.read_csv('Iris.csv')
#
#dataset information
data.info()
#total categories 
data["Species"].unique()
#
#realtion between species and SepalLengthCm By KERNAL DENSITY ESTIMATION
for x in ['Iris-setosa','Iris-versicolor','Iris-virginica']:
  data.SepalLengthCm[data.Species==x].plot(kind="kde")
  plt.title("Species wrt SepalLengthCm")
  plt.legend(("Iris-setosa","Iris-versicolor","Iris-virginica"))
  
#describe statistical values
data.describe()

import seaborn as sns
fig1 = sns.boxplot(x="Species",y="SepalLengthCm",  data=data)

import seaborn as sns
fig2 = sns.boxplot(x="Species",y="SepalWidthCm",  data=data)

import seaborn as sns
fig3 = sns.boxplot(x="Species",y="PetalLengthCm",  data=data)

import seaborn as sns
fig4 = sns.boxplot(x="Species",y="PetalWidthCm",  data=data)

X = data[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']]
y = data[['Species']]
#label encoding on species
from sklearn.preprocessing import LabelEncoder
lb  = LabelEncoder()
y=lb.fit_transform(y)

from sklearn.model_selection import train_test_split
import warnings
warnings.filterwarnings('ignore')
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2,random_state=0)
from sklearn.preprocessing import StandardScaler

#feature scaling
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.fit_transform(X_test)

from sklearn.model_selection import GridSearchCV


#applying SVM
from sklearn.svm import SVC
classifier = SVC()
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

print(cm)
'''
#Cross Validation
from sklearn import model_selection
scores = model_selection.cross_val_score(classifier,X_train,y_train,scoring = "accuracy",cv=10)

#print(scores.mean())
'''
#deciding hyperparameters
parameters = [{'C':[1,10,100],'kernel':['linear'],'gamma':[0.25,0.5,0.15]},{'C':[1,10,100],'kernel':['rbf'],'gamma':[0.25,0.5,0.15]},{'C':[1,10,100],'kernel':['poly'],'gamma':[0.25,0.5,0.15]}]
gridsearch = GridSearchCV(estimator=classifier,  
                     param_grid=parameters,
                     scoring='accuracy',
                     cv=10,)
gridsearch=gridsearch.fit(X,y) 
best_result = gridsearch.best_score_
best_parameters = gridsearch.best_params_
print(best_result)
print(best_parameters)